ls
git clone git@github.com:sanjnac13/Biocomp_tutorial9.git
library(readr)
PIRK_HH_KAP_20210603 <- read_csv("Desktop/PIRK-HH-KAP_20210603.csv")
View(PIRK_HH_KAP_20210603)
knitr::opts_chunk$set(echo = TRUE)
install("tidyverse")
install("tidyverse")
read.csv("PIRK_HH_KAP_20210603.csv")
read.csv("PIRK_HH_KAP_20210603.csv")
read.csv("Research.csv")
read.csv("Research")
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
read.csv("Research")
read.csv("Research.csv")
research <- read.csv("Research.csv")
glimpse(research)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
research <- read.csv("Research.csv")
glimpse(research)
library(readr)
screen_120 <- read_csv("Desktop/R Studio Projects/Rproject2021/countryY/screen_120.csv")
View(screen_120)
setwd("C:Desktop/R Studio Projects/Rproject2021")
##2a: Create function to organize all csv file data in country Y
csvcompiling <- function(dir) {
# define fileset
files<-list.files(path=dir, full.names=TRUE)
# read in first file
alldata <- read.csv("~/Desktop/R Studio Projects/Rproject2021/countryY/screen_120.csv",
header=TRUE, stringsAsFactors = FALSE)
alldata$country <- numeric(length=nrow(alldata))
for (i in 1:length(alldata$country)){
alldata$country[i] = "Y"
}
alldata$DOY <- numeric(length=nrow(alldata))
for (i in 1:length(alldata$DOY)){
alldata$DOY[i] = 120
}
year = 121
for(i in 2:length(files)){
# open every file and add columns for country and DOY
csvdata <- read.table(file=files[i], sep=',', header=TRUE,
stringsAsFactors=FALSE)
csvdata$country <- numeric(length=nrow(csvdata))
for (i in 1:length(csvdata$country)){
csvdata$country[i] = "Y"
}
csvdata$DOY <- numeric(length=nrow(csvdata))
for (i in 1:length(csvdata$DOY)){
csvdata$DOY[i] = year
}
# combine all files
alldata <-rbind(alldata,csvdata)
year = year + 1
}
# Manage NA conditionals
if(anyNA(alldata) == TRUE){
print("NA present.")
yourresponse<-readline(prompt="Please select from following:
1) Delete NA rows
2) Include NA rows with warning
3) Include NA rows, excluding warning")
if(yourresponse == "1"){
final_countries<-na.omit(alldata)
}else if(useranswer == "2"){
print("Warning: NA present!")
return(yourresponse)
}else if(yourresponse == "3"){
return(final_countries)
}else{
print("Invalid selection. Please select a choice from 1-3.")
}
return(alldata)
}
return(alldata)
}
dfy <- csvcompiling("~/Desktop/R Studio Projects/Rproject2021/countryY/")
##2b: Repeat previous function with country X
csvcompiling <- function(dir) {
# define fileset
files<-list.files(path=dir, full.names=TRUE)
# read in first file
alldata <- read.csv("~/Desktop/R Studio Projects/Rproject2021/countryX/screen_120.csv",
header=TRUE, stringsAsFactors = FALSE)
alldata$country <- numeric(length=nrow(alldata))
for (i in 1:length(alldata$country)){
alldata$country[i] = "X"
}
alldata$DOY <- numeric(length=nrow(alldata))
for (i in 1:length(alldata$DOY)){
alldata$DOY[i] = 120
}
year = 121
for(i in 2:length(files)){
# open every file and add columns for country and DOY
csvdata <- read.table(file=files[i], sep=',', header=TRUE,
stringsAsFactors=FALSE)
csvdata$country <- numeric(length=nrow(csvdata))
for (i in 1:length(csvdata$country)){
csvdata$country[i] = "X"
}
csvdata$DOY <- numeric(length=nrow(csvdata))
for (i in 1:length(csvdata$DOY)){
csvdata$DOY[i] = year
}
# combine all files
alldata <-rbind(alldata,csvdata)
year = year + 1
}
# Manage NA conditionals
if(anyNA(alldata) == TRUE){
print("NA present.")
yourresponse<-readline(prompt="Please select from following:
1) Delete NA rows
2) Include NA rows with warning
3) Include NA rows, excluding warning")
if(yourresponse == "1"){
final_countries<-na.omit(alldata)
}else if(useranswer == "2"){
print("Warning: NA present!")
return(yourresponse)
}else if(yourresponse == "3"){
return(final_countries)
}else{
print("Invalid selection. Please select a choice from 1-3.")
}
return(alldata)
}
return(alldata)
}
dfx <- csvcompiling("~/Desktop/R Studio Projects/Rproject2021/countryX/")
##2c: Bring data from both countries into one single csv file
singledir<-setwd("~/Desktop/R Studio Projects/Rproject2021")
mergecsv<-function(directory){
write.csv(rbind(dfx, dfy),"finalcombineddata.csv")
finalmerging<-read.csv("finalcombineddata.csv")
return(finalmerging)
}
mergecsv(singledir)
library(readr)
finalcombineddata <- read_csv("finalcombineddata.csv")
View(finalcombineddata)
# Country X data
countryX_data <- data[data$country == "X",]
# Country Y data
countryY_data <- data[data$country == "Y",]
countryX_data <- all_data[all_data$country == "X",]
# Country Y data
countryY_data <- all_data[all_data$country == "Y",]
countryX_data <- data[data$country == "X",]
countryX_data <- data[data$country == "X", ]
data <- read.csv("allData.csv", header=TRUE, sep= ",", stringsAsFactors=FALSE)
countryX_data <- data[data$country == "X", ]
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y",]
data <- read.csv("allData.csv", header=TRUE, sep= ",", stringsAsFactors=FALSE)
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y",]
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country X") +
xlab("Marker") + ylab("Total") +
theme_minimal()
library(ggplot2)
library(cowplot)
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country X") +
xlab("Marker") + ylab("Total") +
theme_minimal()
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country Y") +
xlab("Marker") + ylab("Total") +
theme_minimal()
print(x_marker_graph)
print(y_marker_graph)
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y", ]
# Count each marker per country
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country X") +
xlab("Marker") + ylab("Total") +
theme_minimal()
# Plots Country Y's marker data
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country Y") +
xlab("Marker") + ylab("Total") +
theme_minimal()
# print results
fig<-plot_grid(x_marker_graph, y_marker_graph, labels = c('A', 'B'))
return(fig)
}
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y", ]
# Count each marker per country
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country X") +
xlab("Marker") + ylab("Total") +
theme_minimal()
# Plots Country Y's marker data
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country Y") +
xlab("Marker") + ylab("Total") +
theme_minimal()
# print results
fig<-plot_grid(x_marker_graph, y_marker_graph, labels = c('A', 'B'))
return(fig)
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y", ]
# Count each marker per country
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country X") +
xlab("Marker") + ylab("Total") +
theme_minimal()
# Plots Country Y's marker data
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country Y") +
xlab("Marker") + ylab("Total") +
theme_minimal()
# print results
fig<-plot_grid(x_marker_graph, y_marker_graph, labels = c('A', 'B'))
print(fig)
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y", ]
# Count each marker per country
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
ggtitle("Marker Count of Country X") +
xlab("Marker") + ylab("Total") +
theme_minimal()
# Plots Country Y's marker data
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Marker Count of Country Y") +
theme(legend.position = "none")
xlab("Marker") + ylab("Total") +
theme_minimal()
# print results
fig<-plot_grid(x_marker_graph, y_marker_graph, labels = c('A', 'B'))
print(fig)
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y", ]
# Count each marker per country
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Marker Count of Country X") +
theme(legend.position = "none")
xlab("Marker") + ylab("Total")
# Plots Country Y's marker data
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Marker Count of Country Y") +
theme(legend.position = "none")
xlab("Marker") + ylab("Total")
# print results
fig<-plot_grid(x_marker_graph, y_marker_graph, labels = c('A', 'B'))
print(fig)
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y", ]
# Count each marker per country
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Marker Count of Country X") +
theme(legend.position = "none")
xlab("Marker") + ylab("Total")
theme(classic)
# Plots Country Y's marker data
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Marker Count of Country Y") +
theme(legend.position = "none")
xlab("Marker") + ylab("Total")
# print results
fig<-plot_grid(x_marker_graph, y_marker_graph, labels = c('A', 'B'))
print(fig)
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y", ]
# Count each marker per country
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Marker Count of Country X") +
theme(legend.position = "none")+
xlab("Marker") + ylab("Total")+
theme(classic)
# Plots Country Y's marker data
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Marker Count of Country Y") +
theme(legend.position = "none")+
xlab("Marker") + ylab("Total")+
# print results
fig<-plot_grid(x_marker_graph, y_marker_graph, labels = c('A', 'B'))
print(fig)
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y", ]
# Count each marker per country
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Country X Marker Count") +
theme(legend.position = "none")+
xlab("Marker") + ylab("Total")+
# Plots Country Y's marker data
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Country Y Marker Count") +
theme(legend.position = "none")+
xlab("Marker") + ylab("Total")+
# print results
fig<-plot_grid(x_marker_graph, y_marker_graph, labels = c('A', 'B'))
print(fig)
###STEP (4) - Determine Marker Count
countryX_data <- data[data$country == "X", ]
# Country Y data
countryY_data <- data[data$country == "Y", ]
# Count each marker per country
markers <- data.frame(marker = seq(1,10),
totalX = colSums(countryX_data[, 3:12] != 0),
totalY = colSums(countryY_data[, 3:12] != 0))
markers$marker <- as.factor(markers$marker)
# Plots Country X's marker data
x_marker_graph <- ggplot(markers, aes(x = marker, y = totalX, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Country X Marker Count") +
theme(legend.position = "none")+
xlab("Marker") + ylab("Total")
# Plots Country Y's marker data
y_marker_graph <- ggplot(markers, aes(x = marker, y = totalY, fill = marker)) +
geom_bar(stat = "identity") +
ggtitle("Country Y Marker Count") +
theme(legend.position = "none")+
xlab("Marker") + ylab("Total")
# print results
fig<-plot_grid(x_marker_graph, y_marker_graph, labels = c('A', 'B'))
print(fig)
